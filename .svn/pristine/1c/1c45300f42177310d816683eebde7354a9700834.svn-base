var win2 = Ti.UI.currentWindow;
win2.backgroundColor = '#fff';
var revID = Titanium.UI.currentWindow.revID;
var resID = Titanium.UI.currentWindow.resID;
var termID = Titanium.UI.currentWindow.termID;
var topVal = 100;
var leftVal = 10;
var rowMaxCount = 6;


var conn = Titanium.Database.open('mysdb');
var picNum = conn.execute('SELECT COUNT(*) AS picNum FROM imageData WHERE resiD=? AND termID=?', resID, termID).fieldByName('picNum');
conn.close();

var table = Titanium.UI.createTableView({
	editable : true,
	moveable : false,
	backgroundColor : '#fff',
	separatorColor : '#000',
	top : 150,
	height : 'auto',
	headerTitle : 'Images',
	footerTitle : ' ',
	allowsSelection : false
});

buildImages();

var takePhoto = Titanium.UI.createButton({
	title : 'Take a Photo',
	top : 70,
	width : '90%',
	height : 'auto'
});

var close = Titanium.UI.createButton({
	title : 'Back to Survey',
	top : 0,
	width : '90%',
	height : 'auto'
});

close.addEventListener('click', function(e) {
	wipeTable();//this is probably unnecessary
	win2.close();	
	Ti.Gesture.removeEventListener('orientationchange', adjustGalleryLayout);
});

var deleteConfirmationDialog = Titanium.UI.createAlertDialog({
	title : 'Delete Image?',
	message : 'You are about to delete this image. Continue?',
	buttonNames : ['Yes', 'No'],
	cancel : 1
});

deleteConfirmationDialog.addEventListener('click', function(e) {
	if (e.index == 0) {
		var image = this.target;
		var image_thumb = this.target+ "_thumb";
		console.log("Going to delete " + image + " and " + image_thumb);
		
		var file = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, image);
		var file_thumb = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, image_thumb);
		if (file.exists()) {
			file.deleteFile();
		}
		if (file_thumb.exists()) {
			file_thumb.deleteFile();
		}
		
		var conn = Titanium.Database.open('mysdb');
		conn.execute('DELETE FROM imageData WHERE filename=?', image);
		conn.close();
		deletedDialog.show();
		
		buildImages();
	} else {
		//code to execute when the user clicked No
	}
});

var deletedDialog = Titanium.UI.createAlertDialog({
	title : 'Image Deleted',
	message : 'Image Has been Deleted',
	buttonNames : ['Ok'],
	cancel : 1
});

function wipeTable()
{
	var td = [];	
	table.removeAllChildren();
	table.data = td;	
	table.setData([]);
}

function buildImages() {
	console.log("***** BUILDING IMAGES *****");
	wipeTable();
	
	var conn = Titanium.Database.open('mysdb');
	var currentImages = conn.execute('SELECT * FROM imageData WHERE resiD=? AND termID=?', resID, termID);
	
	picNum = currentImages.rowCount;//conn.execute('SELECT COUNT(*) AS picNum FROM imageData WHERE resiD=? AND termID=?', resID, termID).fieldByName('picNum');
	//alert(picNum);
	conn.close();
	console.log("***** Found " + currentImages.rowCount + " images");
	
	var rowCurrentImageCount = 0;
	var row = Ti.UI.createTableViewRow({});
	row.height = "auto";
	
	while (currentImages.isValidRow()) {
		var image = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, currentImages.fieldByName('filename') + "_thumb");
		if(!image.exists())
		{
			//attempt to rebuild missing thumbnails.
			console.log("Missing thumbnail for "+currentImages.fieldByName('filename')); 
			try
			{
				console.log("Attempting to rebuild thumbnail for "+currentImages.fieldByName('filename'));	
				var imageOriginal = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, currentImages.fieldByName('filename')).read();
				Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, currentImages.fieldByName('filename')+"_thumb").write(imageOriginal.imageAsResized(100,75));
			}
			catch(e)
			{
				console.log(e.message);
			}
			
			image = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, currentImages.fieldByName('filename') + "_thumb");
			if(!image.exists())
			{
				console.log("Thumbnail still not built for "+currentImages.fieldByName('filename'));
				image = Ti.Filesystem.getFile(Titanium.Filesystem.resourcesDirectory,'images/badThumb.png');
			}
			imageOriginal = null;
		}
		
		console.log("**** insert " + currentImages.fieldByName('filename') + "_thumb");
		var imageView = Ti.UI.createImageView({
			width : 100,
			height : 100,
			borderRadius : 2,
			horizontalWrap : true,
			image : image,
			left:(10 + (rowCurrentImageCount*100)),
			actualImageName: currentImages.fieldByName('filename'),
		});
		var imageLabel = Ti.UI.createLabel({
			width : 100,
			height : 20,
			top:110,
			text:currentImages.fieldByName('filename'),
			// borderRadius : 2,
			// horizontalWrap : true,
			// image : image,
			left:(10 + (rowCurrentImageCount*100)),
			// actualImageName: currentImages.fieldByName('filename'),
		});
		
		row.add(imageView);
		row.add(imageLabel);
		console.log("Adding "+currentImages.fieldByName('filename') + "_thumb");
		rowCurrentImageCount++;
		console.log("Image on row count = "+rowCurrentImageCount);
		if(rowCurrentImageCount>=rowMaxCount)
		{
			console.log("We are starting a new row.");
			table.appendRow(row);	
			console.log("Row appended to table. Resetting row & rowCurrentImageCount");
			row = Ti.UI.createTableViewRow({});
			rowCurrentImageCount = 0;
		}

		//Delete Image
		imageView.addEventListener('longpress', function(e) {
			deleteConfirmationDialog.target = this.actualImageName;
			deleteConfirmationDialog.show();
		});
		//Display large view image
		imageView.addEventListener('click', function(e) {
			var imageViewlarge = Ti.UI.createImageView({
				image: Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, this.actualImageName),
			});
			imageViewlarge.addEventListener('click', function(e) {
				win2.remove(imageViewlarge);
			});
			win2.add(imageViewlarge);
		});
		currentImages.next();
	};
	if(rowCurrentImageCount!=0)
	{
		table.appendRow(row);
	}
};

takePhoto.addEventListener('click', function(e) {
	Titanium.UI.Android.hideSoftKeyboard();
	takePictures();	
});
var adjustGalleryLayout = function(e){
	if(e.source.isLandscape())
	{
		rowMaxCount = 10;
	}
	else//assume portait
	{
		rowMaxCount = 6;
	}
	
	buildImages();
};
Ti.Gesture.addEventListener('orientationchange',adjustGalleryLayout);

/*************Save the below code for eventual custom control development....**************************//*  
var cameraOverlay = Ti.UI.createView({ 
	top: 0, 
	// right: 0, 
	height: 50, 
	left: 0 ,
	width: 200, 
	// backgroundColor:'#000',
	touchEnabled : true,
});


var controlView = Ti.UI.createView({ 
	top: 0, 
	right: 0, 
	height: Ti.UI.SIZE, 
	// left: 0 ,
	width: 200, 
	backgroundColor:'#000',
	// touchEnabled : true,
});


var cameraBackButton = Titanium.UI.createButton({
	title : 'Back to Gallery',
	top : 10,
	left : 10,
	width : 100,
	height : 50
});

var cameraTakePictureButton = Titanium.UI.createButton({
	title : 'Take Picture',
	top : 10,
	left : 10,
	width : 100,
	height : 50
});

var cameraBackButton = Titanium.UI.createButton({
	title : 'Back to Gallery',
	top : 10,
	left : 10,
	width : 100,
	height : 50
});

controlView.add(cameraBackButton);
cameraBackButton.addEventListener('click', function() {
	// Titanium.Media.hideCamera();
});
var cOLabel = Ti.UI.createLabel({
	color : '#fff',
	font : {
		fontSize : 28
	},
	text : "I am an overlay!",
	textAlign : Ti.UI.TEXT_ALIGNMENT_CENTER,
	bottom: 10,
	right: 30,
	width : Ti.UI.SIZE,
	// height : 'auto'
});
cameraOverlay.add(controlView);
*//*************Save the above code for eventual custom control development....**************************/

function padPicNum()
{
	return (picNum>=0 && picNum<10)?"0"+picNum:picNum;
}

function takePictures()
{
	
	Titanium.Media.showCamera({
		// overlay: cameraOverlay,
		showControls : true,
		mediaTypes : Ti.Media.MEDIA_TYPE_PHOTO,
		autohide : true,
		allowEditing : true,
		success : function(event) {
			win2.remove(table);
			wipeTable();
			
			var image = event.media;
			
			// var paddedPicNum = (picNum>=0 && picNum<10)?"0"+picNum:picNum;
			var paddedPicNum = padPicNum();
			
			console.log("Padded picture number: "+paddedPicNum);
			var filename = resID + "_" + paddedPicNum;
			
			var file = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, filename);
			
			//In theory, if the filename already exists, we'll continue to increment the numbers until we come to one we haven't used yet. 
			while(file.exists())
			{
				picNum++;
				paddedPicNum = padPicNum();
				console.log("Padded picture number: "+paddedPicNum);
				filename = resID + "_" + paddedPicNum;
				file = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, filename);
			}


			
			file.write(image);
			console.log("Got image from camera & saved it");
			//Save image association
			var conn = Titanium.Database.open('mysdb');
			conn.execute('INSERT OR REPLACE INTO imageData(resID, termID, filename) VALUES (?,?,?)', resID, termID, filename);
			conn.close();
			
			file = null;//remove the image file object
			console.log("About to create thumbnail...");
			try
			{
				// var image_thumb = image.imageAsThumbnail(100,1,2);
				// Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, filename +"_thumb").write(image_thumb);
				// delete image_thumb;
				
				// var image_thumb = image.imageAsResized(100,75);
				Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, filename +"_thumb").write(image.imageAsResized(100,75));
				
				// var imgV = Titanium.UI.createImageView({
						    // image:image,
						    // width:100, //768x1024 proportionally scales to 480x640, 375x500, 240x320, 180x240
						    // height:75 //240x320 for CoverFlow? 
						// });      
				// //image = imgV.toImage().media;
				// imagevScaled = imgV.toImage().media;
				// Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, filename +"_thumb").write(imagevScaled);
				
			}
			catch(e)
			{
				console.log(e.message);
			}
			delete image;
			picNum++;			
			buildImages();
			win2.add(table);
		},
	});
}

win2.add(table);
win2.add(takePhoto);
win2.add(close);